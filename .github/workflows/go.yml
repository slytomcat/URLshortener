name: Go
on:
  push:
    branches:
      - master
      - dev
  pull_request:
    branches:
      - master
jobs:
  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19
      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            /home/runner/.cache/go-build/
            /home/runner/go/pkg/mod/
          key: GO_MOD_CACHE
      - name: Test
        run: go test -v --race ./...
        env:
          URLSHORTENER_REDISADDRS: localhost:6379
          URLSHORTENER_REDISPASSWORD: ""
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19
      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            /home/runner/.cache/go-build/
            /home/runner/go/pkg/mod/
          key: GO_MOD_CACHE
      - name: Build
        run: ./build.sh
      - name: Upload a Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build_artifacts
          path: |
            URLshortener
  push:
    needs: build
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: urlshortener
    steps:
      - uses: actions/checkout@v3
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build_artifacts
      - name: Log into github registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build and Push image for github
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Get version
          VERSION=$(./URLshortener -v | awk '{print $2}')
          echo "Building image $IMAGE_ID:$VERSION"
          docker build . --file dockerfile --tag $IMAGE_ID:$VERSION
          docker tag $IMAGE_ID:$VERSION $IMAGE_ID:latest
          # Push image to GitHub Packages.
          docker push --all-tags $IMAGE_ID
